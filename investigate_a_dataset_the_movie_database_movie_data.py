# -*- coding: utf-8 -*-
"""Investigate a Dataset - The Movie Database movie data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s-s-NUBxVBcbXQJqzhWW4SC8uXiyPXrF

# Project: Investigate a Dataset: The Movie Database movie data
- This data set contains information about 10,000 movies collected from The Movie Database (TMDb), including ther release date, budget, revenue generated, users vote counts, etc. Certain columns, like ‘cast’ and ‘genres’, contain multiple values separated by pipe (|) characters.
- The final two columns ending with “_adj” show the budget and revenue of the associated movie in terms of 2010 dollars, accounting for inflation over time.

## Table of Contents
<ul>
<li><a href="#intro">Introduction</a></li>
<li><a href="#wrangling">Data Wrangling</a></li>
    <ul>
        <li><a href="#inspect">Performing operations to inspect data types and looking for instances of missing or possibly errant data</a></li>
        <li><a href="#observations">Observations</a></li>
        <li><a href="#cleaning">Data Cleaning: Fixing common issues found in the datasets</a></li>
        <ul>
            <li><a href="#missing">Missing data</a></li>
            <li><a href="#duplicate">Duplicate data</a></li>
            <li><a href="#incorrect">Incorrect data types</a></li>
        </ul>
    </ul>
<li><a href="#eda">Exploratory Data Analysis</a></li>
    <ul>
        <li><a href="#Research Q1">Research Question 1: What genres movies are most popular?</a></li>
        <li><a href="#Research Q2">Research Question 2: What genre of movies have usually been longest and shortest?</a></li>
        <li><a href="#Research Q3">Research Question 3: What are the top 10 movies by popularity?</a></li>
        <li><a href="#Research Q4">Research Question 4: Which year has the highest release of movies?</a></li>
        <li><a href="#Research Q5">Research Question 5: Do movies having higher budget more popular than movies with lower budget?</a></li>
        <li><a href="#Research Q6">Research Question 6: Which Month has the highest released number of movies in all of the years?</a></li>
    </ul>
<li><a href="#conclusions">Conclusions</a></li>
</ul>

<a id='intro'></a>
## Introduction

### About Dataset
### Background
What can we say about the success of a movie before it is released? Are there certain companies (Pixar?) that have found a consistent formula? Given that major films costing over $100 million to produce can still flop, this question is more important than ever to the industry. Film aficionados might have different interests. Can we predict which films will be highly rated, whether or not they are a commercial success?

This is a great place to start digging in to those questions, with data on the plot, cast, crew, budget, and revenues of several thousand films.

In this presentation, based on this dataset various questions will be answered for the curious minds. For example:
- Which genres are most popular from year to year?
- What kinds of properties are associated with movies that have high revenues?
- who are the most famous actors?
- Movie genres, how did they change all over the years.
- What about the revenues, budget and movie popularity, do they correlate with each other.

So Let's start exploring the dataset.

> **Importing required packages**
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing required packages

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import warnings
warnings.filterwarnings('ignore')

"""<a id='wrangling'></a>
## Data Wrangling

In this step, I load in the data for inspection to understand the data structure, check for cleanliness, and then trim and clean the dataset for analysis. For this, I:
- check for missing data
- check for duplicate rows
- check and drop non-essential columns
- check for incorrect data types, etc.
"""

# Loading data and printing out a few lines
df_movie = pd.read_csv('tmdb-movies.csv')

# Preview the dataset
df_movie.head()

"""Table shown above is the first 5 rows from the TMDb dataset. Looking at each column, there are `id` columns as a unique value corresponding to each row - entry, which on its side represents each movie. There are other columns which describes financial values such budget and revenue. Other columns include information like the `genre` of each movie, the `production_companies`, the `released_date`, the `director` of each movie, the movies' `runtime`, the crowd's `vote_count`, etc."""

# Checking the size and shape of the dataset
print('The Movie Database data shape :', df_movie.shape)

"""- Total rows are 10866
- Total columns are 21

<a id='inspect'></a>
> **Performing operations to inspect data types and looking for instances of missing or possibly errant data**
"""

# Checking the datatypes of the columns

df_movie.dtypes

# This displays a concise summary of the dataframe, including the number of non-null values in each column
df_movie.info()

# This returns useful descriptive statistics for each column of data
df_movie.describe()

"""From the summary statistics, I can see:
- approximately 65 percent of the movies were popular
"""

# Displaying the total number of null (missing) values in each column
df_movie.isna().sum()

# Using the duplicated function to see which rows are duplicates
df_movie.duplicated()

# Displaying the count of the duplicates in the data set
sum(df_movie.duplicated())

# This returns the number of unique values in each column
df_movie.nunique()

"""<a id='observations'></a>
### Observations:
- #### For missing/null values:
> - `imdb_id` has **10** rows that are null
> - `cast` of **76** rows are missing
> - `homepage` has **7930** rows that are null
> - `director` has **44** rows that are null
> -  **2824** rows of movies have no `tagline`
> - `keywords` has **1493** rows that are null
> - **4** movies have no `overview`
> -  `genres` has **23** rows that are null
> - `production_companies` of **1030** rows are null

- #### For duplicate rows:
> - There is one duplicate row

- #### For incorrect data types:
> - release_date is in string format, so converting it to datetime format

<a id='cleaning'></a>

### Data Cleaning: Fixing common issues found in the datasets

<a id='missing'></a>
- ### Missing data

The columnn `imdb_id` do not contribute any analysis and so we can drop the column.

There are 7930 movies that don't have any `homepage`. We drop `homepage` column as it doesn't add any value to our analysis.

`Tagline`, `keywords`, and `overview` are very specific to individual movies and hence we drop those columns for our analysis.

In conclusion, we remove `imdb_id`, `homepage`, `tagline`, `overview`, and `keywords` columns
"""

df_movie.drop(columns = ['imdb_id', 'homepage', 'tagline', 'keywords', 'overview'], inplace=True, axis=1)

df_movie

"""<a id='duplicate'></a>
- ### Duplicate data
"""

# drop duplicate rows
df_movie.drop_duplicates(inplace=True)

sum(df_movie.duplicated())

"""<a id='incorrect'></a>
- ### Incorrect data types
"""

type(df_movie.release_date[0])

"""In this case, release_date are represented as strings instead of datetime. So,

1.   List item
2.   List item

using the pandas function `to_datetime` to convert this column to datetime.
"""

## Convert release_date from string format to datetime
df_movie['release_date'] = pd.to_datetime(df_movie['release_date'])
df_movie['release_date'].head()

type(df_movie.release_date[0])

df_movie.genres.unique()

df_movie.info()

"""Now we have completed the data wrangling step by dropping the not-required columns, making correction to incorrect data types and missing data, and removing duplicate rows/values."""

# Saving the second dataframe with the movie database data into a csv file for the next section
df_movie.to_csv('tmdb-movies_edited.csv', index=False)

df_movies = pd.read_csv('tmdb-movies_edited.csv')
df_movies['release_date'] = pd.to_datetime(df_movies['release_date'])

"""<a id='eda'></a>
## Exploratory Data Analysis

<a id='Research Q1'></a>
> - ## Research Question 1: What genres are most popular?
"""

# splitting by seperator

def splitbyseperator(column, seperator):
    return column.str.split(seperator, expand=True)

# creating a copy of genre
df_copy_genre = df_movies.copy()

# split the genre column and convert it to an array
## e.g. 'Action|Thriller|Horror' = ['Action','Thriller','Horror']

df_copy_genre['genres'] = df_copy_genre.genres.str.split('|')

# Now we use explode function to give each genre its individual row
df_genre_multiple = df_copy_genre.explode('genres')
df_genre_multiple.head()

df_genre = df_genre_multiple[['popularity', 'genres','release_year']]
df_genre.head()

df_genre

# group by genre and get popularity

df_genre_grouped = df_genre_multiple.groupby(['release_year','genres']).popularity.mean()
genre_yearwise = df_genre_grouped.to_frame().groupby(level = 'release_year').popularity.nlargest(1).to_frame()

genre_yearwise.reset_index(level=2, inplace=True)

genre_yearwise.info()

genre = genre_yearwise.genres.value_counts()
genre

plt.figure(figsize = (12, 8));
genre.plot(title = "Popularity of movies by various genres", xlabel = 'Genres', ylabel = 'Popularity', kind='bar');

"""**Result:**
- Adventure kind of movies is the most popular genre category of movies followed by Animation and Fantasy category.

<a id='Research Q2'></a>
> - ## Research Question 2: What genre category of movies have usually been longest and shortest?
"""

runtime_genre = df_genre_multiple.groupby('genres').runtime.mean().sort_values()

runtime_genre.plot(title = 'Runtime of movies by various genres', xlabel='Genres', ylabel='runtime (in minutes)', kind='bar', figsize=(12, 8));

"""**Results: By aggregate running time of various kind of genre movies we conclude that:**
- History movies are usually the longest (greater than 130 minutes but less than 140 minutes).
- War movies are the 2nd longest (approximately 130 minutes)
- Animation movies are usually the shortest (approximately 70 minutes)
- Family, TV Movie and Horror genre category of movies are usually the next shorter (increasing in minutes) set of movies respectively

<a id='Research Q3'></a>
> - ## Research Question 3: What are the top 10 movies by popularity?
"""

top_movie_by_pop = df_movies.sort_values(by = ['popularity'], ascending = False)[['original_title', 'popularity']].head(10)
top_movie_by_pop.reset_index(drop=True, inplace=True)
top_movie_by_pop.set_index('original_title', inplace=True)
top_movie_by_pop

top_movie_by_pop.popularity.plot(kind='barh')
plt.title('Top 10 Movies by popularity')
plt.ylabel('Title of Movies')
plt.xlabel('Popularity');

top_movie_by_pop = df_movies[['original_title', 'popularity']]

sns.set(rc={'figure.figsize':(12, 8)}, font_scale = 1)

ax = sns.barplot(x = top_movie_by_pop.sort_values(by="popularity", ascending=False).head(10).original_title,
                 y = top_movie_by_pop.sort_values(by="popularity", ascending=False).head(10).popularity)

#rotate x-axis' text
for item in ax.get_xticklabels():
    item.set_rotation(90)

ax.set(xlabel='Title of Movies', ylabel='Popularity', title = 'Top 10 Movies based on their Popularity')
plt.show();

"""**Result/Observation:**
- Jurassic World, Mad Max: Fury Road and Interstellar are the Top 3 movies based on popularity.

<a id='Research Q4'></a>
> - ## Research Question 4: Which year has the highest release of movies?
"""

# counting the number of movies in each year

df_movies_count = df_movies.groupby('release_year').count()['id']

df_movies_count.plot(xticks = np.arange(1960, 2016, 5))
sns.set(rc = {'figure.figsize': (12, 8)})
plt.title("Release year of movies Vs Number of movies", fontsize = 14)
plt.xlabel('Release year', fontsize = 13)
plt.ylabel('Number of movies', fontsize = 13)

# style sheet
sns.set_style("whitegrid")

"""After seeing the plot and the output, I conclude that year 2014 year has the highest release of movies (700) followed by year 2013 (659) and year 2015 (629).

<a id='Research Q5'></a>
> - ### Research Question 5: Do movies having higher budget more popular than movies with lower budget?
"""

##source of quantilecut code https://medium.com/@onpillow/02-investigate-tmdb-movie-dataset-python-data-analysis-project-part-2-exploratory-data-4839f697092
def cut_into_quantile(dfname, column_name):
    """
        cut_into_quantile takes data frame and column name as param.
        returns the dataframe with an additional column "columnname_levels" and divide it into 4 quantiles.
    """
    ## find quartile,max and min values
    min_value = dfname[column_name].min()
    first_quantile = dfname[column_name].describe()[4]
    second_quantile = dfname[column_name].describe()[5]
    third_quantile = dfname[column_name].describe()[6]
    max_value = dfname[column_name].max()

    ## bin edges that will be used to cut data in groups
    bin_edges = [min_value,first_quantile,second_quantile,third_quantile,max_value]

    ## labels for the four budget level groups
    bin_names = ['Low','Medium','Moderately High','High']

    ## Create budget levels column
    name = '{}_levels'.format(column_name)
    dfname[name] = pd.cut(dfname[column_name],bin_edges,labels=bin_names,include_lowest=True)
    return dfname

df_movies_c = df_movies[df_movies['budget_adj']!=0].copy()
df_budget_group = cut_into_quantile(df_movies_c, 'budget_adj')

df_budget_filtered_data = df_budget_group[df_budget_group['release_year'].isin([2010, 2011, 2012, 2013, 2014, 2015])]

df_popularity_on_budget = df_budget_filtered_data.groupby(['release_year','budget_adj_levels']).popularity.mean().to_frame().reset_index()

short_movie_vote = df_popularity_on_budget[df_popularity_on_budget['budget_adj_levels'] == 'Low'].popularity.tolist()
medium_movie_vote = df_popularity_on_budget[df_popularity_on_budget['budget_adj_levels'] == 'Medium'].popularity.tolist()
mod_long_movie_vote = df_popularity_on_budget[df_popularity_on_budget['budget_adj_levels'] == 'Moderately High'].popularity.tolist()
long_movie_vote = df_popularity_on_budget[df_popularity_on_budget['budget_adj_levels'] == 'High'].popularity.tolist()

len(df_popularity_on_budget)

len(high_revenue_pop)

release_years = [2010,2011,2012,2013,2014,2015]

plotdata = pd.DataFrame({
    "Low": short_movie_vote,
    "Moderate": medium_movie_vote,
    "Moderately High": mod_long_movie_vote,
    "High": long_movie_vote
},index=release_years)

plotdata.plot(kind='bar')
plt.title('Popularity of movies by budget')
plt.xlabel("Year")
plt.ylabel("Popularity");

"""### Results - Budget and Popularity

* Seeing the latest trends in above graph we could say Higher budget movies are more popular.
* Higher budget movies have higher marketing expense as compared to the lower budget movies

<a id='Research Q6'></a>
> - ## Research Question 6: Which Month has the highest released number of movies in all of the years?
"""

number_of_release = df_movies['release_date'].dt.month.value_counts().sort_index()

number_of_release

months = ['January','February','March','April','May','June','July','August','September','October','November','December']
number_of_release = pd.DataFrame(number_of_release)
number_of_release['month'] = months

# change the column name of the new dataframe 'number_of_release'
number_of_release.rename(columns = {'release_date': 'number_of_release'}, inplace=True)

number_of_release.plot(x = 'month', kind = 'bar', fontsize = 11, figsize = (12, 8));

# set the labels and titles of the plot.
plt.title('Months vs Number Of Movies Release', fontsize = 15);
plt.xlabel('Month', fontsize = 13);
plt.ylabel('Number of movie release', fontsize = 13);

"""### Result:
According to the plot of `Number of movie release` against `Month`, I conclude that **September** has the highest released number of movies in all of the years with `1331` movies released, followed by **October** with `1153` movies released.

<a id='conclusions'></a>
## Conclusions

Based on the data set analysis we tried to answer a total of 12 questions. Out of which 6 were quantitative and 6 were qualitative. We classified the movies in low budget, moderate budget, high budget and very high budget movies. Based on the latest 5 years 2010 to 2015, we tried to answer Do high budget movies had high popularity? Based on the data we found it looks that high budget movies tend to be more popular. We also classified movies based on short, medium and moderate and very long movies based on their runtime, we found that very long movies are more popular than long movies. Also long > medium > short in terms of popularity. If we go by average votes very long movies again tops the list while medium length movies were found to be least popular among all the five years from 2010 to 2015.In this analysis, we also answered what genres were most popular? The answer for this question came out to be Adventure (25%) followed by Animation and Fantasy. Also we tried to identify what genre of movies have been the longest. The analysis shows that History and war movies to be the longest whereas animation movies usually had the least running time. Also if you are planning for a movie weekend and wish to enjoy the top rated movies in period 1960-2015, "The Story of Film: An Odyssey" and "The Mask You Live In" must be included in your list as they are the top 2 popular movies. We then also dived and tried to identify what genre movies are more popular? We found Adventure movies had highest average popularity followed by Animation whereas History movies tends to have least popularity.

Based on our analysis we also found that September month is when most number of movies were released in this period.

**Summary Conclusion**
Higher budget movies usually had more popularity as compared to lower budget movies.
Movie nakers referred September and October month for releasing their movie followed by December and January
Colin Trevorrow is the director whose movies have the max popularity.
Mark Cousins is the director whose movies have the max average voter ratings.
Jurassic World was the most popular movie.
The Story of Film An Odyssey has got the highest average rang of 9.2.
Higher budget movies were found to be more popular than their lower counterparts.
Robert D Niro has acted in most movies (72) from 1960 to 2015.
From 1960 to 2015 adventure movies were most prominent and constituted the largest proportion of all movie genres from 1960 to 2015 (25%).
Very Long movies are found to be more popular and have higher vote_avg ratings than their shorter counterparts.

> **Tip**: Finally, summarize your findings and the results that have been performed. Make sure that you are clear with regards to the limitations of your exploration. If you haven't done any statistical tests, do not imply any statistical conclusions. And make sure you avoid implying causation from correlation!

> **Tip**: Once you are satisfied with your work, you should save a copy of the report in HTML or PDF form via the **File** > **Download as** submenu. Before exporting your report, check over it to make sure that the flow of the report is complete. You should probably remove all of the "Tip" quotes like this one so that the presentation is as tidy as possible. Congratulations!
"""